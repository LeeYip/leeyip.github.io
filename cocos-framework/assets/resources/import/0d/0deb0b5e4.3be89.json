[1,["ecpdLyjvZBwrvm+cedCcQy","f0BIwQ8D5Ml7nTNQbh1YlS","e0Q6+wIYBNcrsjy14UcEom","a2MjXRFdtLlYQ5ouAFv/+R","e97GVMl6JHh5Ml5qEDdSGa","29FYIk+N1GYaeWH/q1NxQO","f3ZlHjJdNOmKK546bAbo9c","b0IC4pzedLu6JfX9cATxmF","9bvaMerUlDyary99mJa6xp","cfFXus39ZKXaSDXS7s+P80","85/O/IlytBdp1TjyEBdCWl","a5VM8X9GBIublRguM/xNX0","caFyZi14lAG7FORO9FWC64"],["node","_spriteFrame","_effectAsset","root","Fill","Tile","DlgAnim","data","_parent","_N$normalSprite","_N$pressedSprite","_N$hoverSprite","_N$disabledSprite","OpenClip","CloseClip"],[["cc.Node",["_name","_objFlags","_opacity","_components","_prefab","_contentSize","_parent","_children","_trs","_color"],0,9,4,5,1,2,7,5],["cc.Node",["_name","_parent","_components","_prefab","_contentSize","_children","_color","_trs"],2,1,12,4,5,2,5,7],["cc.Widget",["_alignFlags","_originalWidth","_originalHeight","alignMode","node"],-1,1],["cc.Sprite",["_sizeMode","_type","_isTrimmedMode","node","_materials","_spriteFrame"],0,1,3,6],["cc.PrefabInfo",["fileId","root"],2,1],["cc.Label",["_string","_N$horizontalAlign","_N$verticalAlign","_N$overflow","_fontSize","_enableWrapText","_N$cacheMode","node","_materials"],-4,1,3],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Prefab",["_name"],2],["21c0dRZWaBCla5UnByvFBHD",["node","DlgAnim","Tile","Fill","OpenClip","CloseClip"],3,1,1,1,1,6,6],["cc.BlockInputEvents",["node"],3,1],["cc.Button",["_N$transition","node","clickEvents","_N$normalColor","_N$pressedColor","_N$disabledColor","_N$target","_N$normalSprite","_N$pressedSprite","_N$hoverSprite","_N$disabledSprite"],2,1,9,5,5,5,1,6,6,6,6],["cc.ClickEvent",["_componentId","handler","target"],1,1],["e6e3agdOnJF/o7rgEOg4Iq+",["node","Scale"],3,1,5],["63dfaBxVipD7bEv99K+9+0u",["node","FillColor"],3,1,5],["cc.Animation",["node"],3,1],["cc.Material",["_name","_techniqueData"],1]],[[4,0,1,2],[6,0,1,2,4],[3,1,0,3,4,5,3],[3,0,2,3,4,5,3],[15,0,1,3],[7,0,2],[0,0,7,3,4,5,8,2],[0,0,1,7,3,4,5,3],[0,0,2,6,3,4,9,5,3],[0,0,6,7,3,4,5,8,2],[0,0,1,6,3,4,9,5,3],[0,0,6,3,4,9,5,8,2],[1,0,1,5,2,3,6,4,2],[1,0,1,2,3,4,2],[1,0,1,2,3,4,7,2],[2,0,4,2],[2,3,0,1,2,4,5],[2,0,1,2,4,4],[8,0,1,2,3,4,5,1],[4,1,1],[3,0,3,4,5,2],[9,0,1],[10,0,1,2,3,4,5,6,7,8,9,10,2],[11,0,1,2,3],[5,0,4,5,1,2,3,6,7,8,8],[5,0,1,2,3,7,8,5],[12,0,1,1],[13,0,1,1],[14,0,1]],[[[[1,"spriteFill",[{"hash":1959956290,"record":null,"name":"spriteFill|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Constant {\n  vec4 fillColor;\n  float fillPhase;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  o.rgb = mix(o.rgb, fillColor.rgb * o.a, fillPhase);\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 fillColor;\nuniform float fillPhase;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  o.rgb = mix(o.rgb, fillColor.rgb * o.a, fillPhase);\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","binding":1,"members":[{"name":"fillColor","type":16,"count":1},{"name":"fillPhase","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"spriteFill|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"fillColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"fillPhase":{"type":13,"value":[0],"editor":{"range":[0,1,0.1]}}}}]}]]],0,0,[],[],[]],[[[5,"DlgShader"],[6,"DlgShader",[-7,-8],[[15,45,-2],[18,-6,-5,-4,-3,16,17]],[19,-1],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[12,"bg",1,[-11,-12,-13,-14],[[[2,1,0,-9,[14],15],-10],4,1],[0,"2cMDmjcrNJ447piyjVbKBd",1],[4,4285828753],[5,1200,800]],[7,"Background",512,[-17],[[2,1,0,-15,[3],4],[16,0,45,100,40,-16]],[0,"3dKCEKNwZJC7uWq7WCRMUE",1],[5,100,40]],[8,"block",150,1,[[20,0,-18,[0],1],[17,45,100,100,-19],[21,-20]],[0,"25EO7eAbJByIv84EGLySxf",1],[4,4278190080],[5,1920,1080]],[9,"closeButton",2,[3],[[22,2,-21,[[23,"21c0dRZWaBCla5UnByvFBHD","onClickClose",1]],[4,4293322470],[4,4291348680],[4,3363338360],3,5,6,7,8]],[0,"24xixWpb9Je5fnXQcud+hl",1],[5,100,40],[475,340,0,0,0,0,1,2,2,1]],[13,"tile",2,[[[3,2,false,-22,[9],10],-23],4,1],[0,"0aGMdUPWRH9ozpHnNcY9ys",1],[5,300,300]],[14,"fill",2,[[[3,2,false,-24,[11],12],-25],4,1],[0,"fbXzJr2fNMra/OZaA3Pmhh",1],[5,300,300],[350,0,0,0,0,0,1,1,1,1]],[10,"Label",512,3,[[24,"close",20,false,1,1,1,1,-26,[2]]],[0,"59l+x5Z7FJKKmWHVu7ZDpk",1],[4,4278190080],[5,100,40]],[26,6,[0,1,3]],[27,7,[4,4280916182]],[11,"info",2,[[25,"简单的shader示例\n动画速度受到timeScale影响",1,1,3,-27,[13]]],[0,"86cIvUBr5DtJ1/jHSU8Xaa",1],[4,4278387651],[5,1000,90.39999999999999],[0,200,0,0,0,0,1,1,1,1]],[28,2]],0,[0,3,1,0,0,1,0,4,10,0,5,9,0,6,12,0,0,1,0,-1,4,0,-2,2,0,0,2,0,-2,12,0,-1,5,0,-2,6,0,-3,7,0,-4,11,0,0,3,0,0,3,0,-1,8,0,0,4,0,0,4,0,0,4,0,0,5,0,0,6,0,-2,9,0,0,7,0,-2,10,0,0,8,0,0,11,0,7,1,3,8,5,27],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,-1,-1,1,9,10,11,12,-1,1,-1,1,-1,-1,1,13,14],[0,3,0,0,1,1,4,1,5,6,2,7,2,0,0,8,9,10]],[[[4,"spriteFill",{"0":{"defines":{"USE_TEXTURE":true}}}]],0,0,[0],[2],[11]],[[[1,"spriteTile",[{"hash":3785353305,"record":null,"name":"spriteTile|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Constant {\n  vec4 tile;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 uv = fract(v_uv0 * tile.xy + tile.zw);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 tile;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 uv = fract(v_uv0 * tile.xy + tile.zw);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","binding":1,"members":[{"name":"tile","type":16,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"spriteTile|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"tile":{"type":16,"value":[1,1,0,0]}}}]}]]],0,0,[],[],[]],[[[4,"spriteTile",{"0":{"defines":{"USE_TEXTURE":true}}}]],0,0,[0],[2],[12]]]]