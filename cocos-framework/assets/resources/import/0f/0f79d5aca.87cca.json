[1,["f01YbQJCpGoaCtFKNWAV+Q","ecpdLyjvZBwrvm+cedCcQy","f0BIwQ8D5Ml7nTNQbh1YlS","88k3XvbVBH0JIxKxAh+FeY","a1E2YuZiRBZLZsps2l4pTW","153830cb8","a2MjXRFdtLlYQ5ouAFv/+R","e97GVMl6JHh5Ml5qEDdSGa","29FYIk+N1GYaeWH/q1NxQO","9bvaMerUlDyary99mJa6xp","cfFXus39ZKXaSDXS7s+P80","85/O/IlytBdp1TjyEBdCWl","ceICf3VT1FtI1P05b/jhLr"],["node","_spriteFrame","_textureSetter","root","item2","item1","dlgAnim","data","_parent","_N$normalSprite","_N$pressedSprite","_N$hoverSprite","_N$disabledSprite","openClip","closeClip","_effectAsset"],[["cc.Node",["_name","_objFlags","_opacity","_components","_prefab","_contentSize","_parent","_trs","_children","_color"],0,9,4,5,1,7,2,5],["cc.Widget",["_alignFlags","_originalWidth","_originalHeight","alignMode","node"],-1,1],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.Sprite",["_sizeMode","_type","node","_materials","_spriteFrame"],1,1,3,6],["cc.Label",["_string","_N$verticalAlign","_N$overflow","_fontSize","_enableWrapText","_N$horizontalAlign","_N$cacheMode","node","_materials"],-4,1,3],"cc.SpriteFrame",["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Prefab",["_name"],2],["cc.Node",["_name","_parent","_children","_components","_prefab","_color","_contentSize"],2,1,2,12,4,5,5],["19593ehMPtLsoeEdjduLcNZ",["node","dlgAnim","item1","item2","openClip","closeClip"],3,1,1,1,1,6,6],["cc.BlockInputEvents",["node"],3,1],["46c9aT+vftMEJqWINApHQZC",["node"],3,1],["c922bwmEw5OV4VVCBcsN/cG",["node","_materials","_spriteFrame"],3,1,3,6],["cc.Button",["_N$transition","node","clickEvents","_N$normalColor","_N$pressedColor","_N$disabledColor","_N$target","_N$normalSprite","_N$pressedSprite","_N$hoverSprite","_N$disabledSprite"],2,1,9,5,5,5,1,6,6,6,6],["cc.ClickEvent",["_componentId","handler","target"],1,1],["cc.Animation",["node"],3,1],["cc.Material",["_name","_techniqueData"],1]],[[2,0,1,2,2],[0,0,6,3,4,5,7,2],[11,0,1],[12,0,1,2,1],[3,1,0,2,3,4,3],[6,0,1,2,4],[7,0,2],[0,0,8,3,4,5,7,2],[0,0,1,8,3,4,5,3],[0,0,2,6,3,4,9,5,3],[0,0,6,8,3,4,5,7,2],[0,0,1,6,3,4,9,5,3],[0,0,6,3,4,9,5,7,2],[8,0,1,2,3,4,5,6,2],[1,0,4,2],[1,3,0,1,2,4,5],[1,0,1,2,4,4],[9,0,1,2,3,4,5,1],[2,1,2,1],[3,0,2,3,4,2],[10,0,1],[13,0,1,2,3,4,5,6,7,8,9,10,2],[14,0,1,2,3],[4,0,3,4,5,1,2,6,7,8,8],[4,0,1,2,7,8,4],[15,0,1],[16,0,1,3]],[[[{"name":"lang","rect":[3,3,300,179],"offset":[0,19.5],"originalSize":[300,300],"rotated":1,"capInsets":[0,0,0,0]}],[5],0,[0],[2],[5]],[[[5,"multiTexture",[{"hash":3755880003,"record":null,"name":"multiTexture|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nin float a_texture_idx;\nout float texture_idx;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  texture_idx = a_texture_idx;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\nin vec2 v_uv0;\nin float texture_idx;\nuniform sampler2D texture0;\nuniform sampler2D texture1;\nuniform sampler2D texture2;\nuniform sampler2D texture3;\nuniform sampler2D texture4;\nuniform sampler2D texture5;\nuniform sampler2D texture6;\nuniform sampler2D texture7;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  if (texture_idx <= 0.0) {\n  vec4 texture0_tmp = texture(texture0, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture0\n      texture0_tmp.a *= texture(texture0, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture0_tmp.rgb * texture0_tmp.rgb);\n    o.a *= texture0_tmp.a;\n  #else\n    o *= texture0_tmp;\n  #endif\n  } else if (texture_idx <= 1.0) {\n  vec4 texture1_tmp = texture(texture1, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture1\n      texture1_tmp.a *= texture(texture1, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture1_tmp.rgb * texture1_tmp.rgb);\n    o.a *= texture1_tmp.a;\n  #else\n    o *= texture1_tmp;\n  #endif\n  } else if (texture_idx <= 2.0) {\n  vec4 texture2_tmp = texture(texture2, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture2\n      texture2_tmp.a *= texture(texture2, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture2_tmp.rgb * texture2_tmp.rgb);\n    o.a *= texture2_tmp.a;\n  #else\n    o *= texture2_tmp;\n  #endif\n  } else if (texture_idx <= 3.0) {\n  vec4 texture3_tmp = texture(texture3, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture3\n      texture3_tmp.a *= texture(texture3, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture3_tmp.rgb * texture3_tmp.rgb);\n    o.a *= texture3_tmp.a;\n  #else\n    o *= texture3_tmp;\n  #endif\n  } else if (texture_idx <= 4.0) {\n  vec4 texture4_tmp = texture(texture4, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture4\n      texture4_tmp.a *= texture(texture4, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture4_tmp.rgb * texture4_tmp.rgb);\n    o.a *= texture4_tmp.a;\n  #else\n    o *= texture4_tmp;\n  #endif\n  } else if (texture_idx <= 5.0) {\n  vec4 texture5_tmp = texture(texture5, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture5\n      texture5_tmp.a *= texture(texture5, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture5_tmp.rgb * texture5_tmp.rgb);\n    o.a *= texture5_tmp.a;\n  #else\n    o *= texture5_tmp;\n  #endif\n  } else if (texture_idx <= 6.0) {\n  vec4 texture6_tmp = texture(texture6, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture6\n      texture6_tmp.a *= texture(texture6, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture6_tmp.rgb * texture6_tmp.rgb);\n    o.a *= texture6_tmp.a;\n  #else\n    o *= texture6_tmp;\n  #endif\n  } else if (texture_idx <= 7.0) {\n  vec4 texture7_tmp = texture(texture7, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture7\n      texture7_tmp.a *= texture(texture7, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture7_tmp.rgb * texture7_tmp.rgb);\n    o.a *= texture7_tmp.a;\n  #else\n    o *= texture7_tmp;\n  #endif\n  }\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nattribute float a_texture_idx;\nvarying float texture_idx;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  texture_idx = a_texture_idx;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nvarying float texture_idx;\nuniform sampler2D texture0;\nuniform sampler2D texture1;\nuniform sampler2D texture2;\nuniform sampler2D texture3;\nuniform sampler2D texture4;\nuniform sampler2D texture5;\nuniform sampler2D texture6;\nuniform sampler2D texture7;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  if (texture_idx <= 0.0) {\n  vec4 texture0_tmp = texture2D(texture0, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture0\n      texture0_tmp.a *= texture2D(texture0, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture0_tmp.rgb * texture0_tmp.rgb);\n    o.a *= texture0_tmp.a;\n  #else\n    o *= texture0_tmp;\n  #endif\n  } else if (texture_idx <= 1.0) {\n  vec4 texture1_tmp = texture2D(texture1, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture1\n      texture1_tmp.a *= texture2D(texture1, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture1_tmp.rgb * texture1_tmp.rgb);\n    o.a *= texture1_tmp.a;\n  #else\n    o *= texture1_tmp;\n  #endif\n  } else if (texture_idx <= 2.0) {\n  vec4 texture2_tmp = texture2D(texture2, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture2\n      texture2_tmp.a *= texture2D(texture2, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture2_tmp.rgb * texture2_tmp.rgb);\n    o.a *= texture2_tmp.a;\n  #else\n    o *= texture2_tmp;\n  #endif\n  } else if (texture_idx <= 3.0) {\n  vec4 texture3_tmp = texture2D(texture3, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture3\n      texture3_tmp.a *= texture2D(texture3, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture3_tmp.rgb * texture3_tmp.rgb);\n    o.a *= texture3_tmp.a;\n  #else\n    o *= texture3_tmp;\n  #endif\n  } else if (texture_idx <= 4.0) {\n  vec4 texture4_tmp = texture2D(texture4, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture4\n      texture4_tmp.a *= texture2D(texture4, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture4_tmp.rgb * texture4_tmp.rgb);\n    o.a *= texture4_tmp.a;\n  #else\n    o *= texture4_tmp;\n  #endif\n  } else if (texture_idx <= 5.0) {\n  vec4 texture5_tmp = texture2D(texture5, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture5\n      texture5_tmp.a *= texture2D(texture5, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture5_tmp.rgb * texture5_tmp.rgb);\n    o.a *= texture5_tmp.a;\n  #else\n    o *= texture5_tmp;\n  #endif\n  } else if (texture_idx <= 6.0) {\n  vec4 texture6_tmp = texture2D(texture6, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture6\n      texture6_tmp.a *= texture2D(texture6, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture6_tmp.rgb * texture6_tmp.rgb);\n    o.a *= texture6_tmp.a;\n  #else\n    o *= texture6_tmp;\n  #endif\n  } else if (texture_idx <= 7.0) {\n  vec4 texture7_tmp = texture2D(texture7, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture7\n      texture7_tmp.a *= texture2D(texture7, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture7_tmp.rgb * texture7_tmp.rgb);\n    o.a *= texture7_tmp.a;\n  #else\n    o *= texture7_tmp;\n  #endif\n  }\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture0","type":"boolean","defines":[]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture1","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture2","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture3","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture4","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture5","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture6","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture7","type":"boolean","defines":[]},{"name":"USE_BGRA","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplers":[{"name":"texture0","type":29,"count":1,"binding":30,"defines":[]},{"name":"texture1","type":29,"count":1,"binding":31,"defines":[]},{"name":"texture2","type":29,"count":1,"binding":32,"defines":[]},{"name":"texture3","type":29,"count":1,"binding":33,"defines":[]},{"name":"texture4","type":29,"count":1,"binding":34,"defines":[]},{"name":"texture5","type":29,"count":1,"binding":35,"defines":[]},{"name":"texture6","type":29,"count":1,"binding":36,"defines":[]},{"name":"texture7","type":29,"count":1,"binding":37,"defines":[]}]}],[{"passes":[{"program":"multiTexture|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture0":{"value":"white","type":29},"texture1":{"value":"white","type":29},"texture2":{"value":"white","type":29},"texture3":{"value":"white","type":29},"texture4":{"value":"white","type":29},"texture5":{"value":"white","type":29},"texture6":{"value":"white","type":29},"texture7":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[[6,"DlgMultiTexture"],[7,"DlgMultiTexture",[-7,-8],[[14,45,-2],[17,-6,-5,-4,-3,24,25]],[18,-1,0],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[13,"bg",1,[-11,-12,-13,-14,-15,-16,-17,-18],[[[4,1,0,-9,[22],23],-10],4,1],[0,"2cMDmjcrNJ447piyjVbKBd",1,0],[4,4285828753],[5,1200,800]],[8,"Background",512,[-21],[[4,1,0,-19,[3],4],[15,0,45,100,40,-20]],[0,"3dKCEKNwZJC7uWq7WCRMUE",1,0],[5,100,40]],[9,"block",150,1,[[19,0,-22,[0],1],[16,45,100,100,-23],[20,-24]],[0,"25EO7eAbJByIv84EGLySxf",1,0],[4,4278190080],[5,1920,1080]],[1,"MultiSprite",2,[[2,-25],[3,-26,[10],11]],[0,"fawHCaAPJG3a9FKGoKtiNC",1,0],[5,300,179],[-263.998,-19.13,0,0,0,0,1,1,1,1]],[1,"MultiSprite copy",2,[[2,-27],[3,-28,[12],13]],[0,"83n2aHtWJBVILfPtWuFaGq",1,0],[5,300,239],[202.781,0,0,0,0,0,1,1,1,1]],[10,"closeButton",2,[3],[[21,2,-29,[[22,"19593ehMPtLsoeEdjduLcNZ","onClickClose",1]],[4,4293322470],[4,4291348680],[4,3363338360],3,5,6,7,8]],[0,"24xixWpb9Je5fnXQcud+hl",1,0],[5,100,40],[475,340,0,0,0,0,1,2,2,1]],[1,"MultiSprite copy",2,[[2,-30],[3,-31,[14],15]],[0,"3d4In4fztLppBRzjIxHeaZ",1,0],[5,300,179],[-263.998,-112.527,0,0,0,0,1,1,1,1]],[1,"MultiSprite copy",2,[[2,-32],[3,-33,[16],17]],[0,"43jirGCldM1bZUYXrZZvZZ",1,0],[5,300,239],[202.781,-93.397,0,0,0,0,1,1,1,1]],[1,"MultiSprite copy",2,[[2,-34],[3,-35,[18],19]],[0,"33Jfb0+WRCvJ++V/P/wehz",1,0],[5,300,179],[-263.998,46.501,0,0,0,0,1,1,1,1]],[1,"MultiSprite copy",2,[[2,-36],[3,-37,[20],21]],[0,"ccyqkp6IVLHJg7Ro8drx9i",1,0],[5,300,239],[202.781,65.631,0,0,0,0,1,1,1,1]],[11,"Label",512,3,[[23,"close",20,false,1,1,1,1,-38,[2]]],[0,"59l+x5Z7FJKKmWHVu7ZDpk",1,0],[4,4278190080],[5,100,40]],[12,"info",2,[[24,"基于Multi-Texture的方式实现合批，如下所示，分别来自两个不同的图集的纹理交替显示（由于此例子使用Cocos的自动图集，需打包后才能获取图集纹理合批）",1,3,-39,[9]]],[0,"2aTasNKf9F36cHm/Q9BLi2",1,0],[4,4278387651],[5,1000,130.39999999999998],[0,230,0,0,0,0,1,1,1,1]],[25,2]],0,[0,3,1,0,0,1,0,4,6,0,5,5,0,6,14,0,0,1,0,-1,4,0,-2,2,0,0,2,0,-2,14,0,-1,7,0,-2,13,0,-3,5,0,-4,6,0,-5,8,0,-6,9,0,-7,10,0,-8,11,0,0,3,0,0,3,0,-1,12,0,0,4,0,0,4,0,0,4,0,0,5,0,0,5,0,0,6,0,0,6,0,0,7,0,0,8,0,0,8,0,0,9,0,0,9,0,0,10,0,0,10,0,0,11,0,0,11,0,0,12,0,0,13,0,7,1,3,8,7,39],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,-1,-1,1,9,10,11,12,-1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,13,14],[1,6,1,1,2,2,7,2,8,1,0,3,0,4,0,3,0,4,0,3,0,4,1,9,10,11]],[[[26,"multiTexture",{"0":{"defines":{}}}]],0,0,[0],[15],[12]]]]